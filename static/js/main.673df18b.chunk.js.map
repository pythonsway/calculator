{"version":3,"sources":["components/Display.jsx","components/Keys.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","react_default","a","createElement","id","formula","substring","length","input","Keys","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","calcRef","current","focus","handleKeyDown","event","preventDefault","key","setState","activeKey","handleInput","values","ids","includes","state","React","createRef","_this2","keys","map","ref","className","undefined","onClick","onKeyDown","onKeyUp","Component","App","calculate","n1","operator","n2","firstNum","parseFloat","secondNum","toString","getKeyType","isNaN","createResultString","keyType","displayedNum","previousKeyType","firstValue","modValue","calculatedValue","Fragment","src_components_Display","concat","src_components_Keys","clear","divide","multiply","seven","eight","nine","subtract","four","five","six","add","one","two","three","zero","decimal","equals","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.673df18b.chunk.js","sourcesContent":["import React from 'react';\nimport './Display.css';\n\nconst Display = (props) => (\n    <div id=\"display\">\n        {/* prevent overflow */}\n        <div id=\"formula\">{props.formula.substring(props.formula.length - 30)}</div>\n        <div id=\"input\">{props.input.substring(0, 14)}</div>\n    </div>\n)\n\nexport default Display;","import React from 'react';\nimport './Keys.css';\n\nclass Keys extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeKey: null\n    }\n    this.calcRef = React.createRef();\n  }\n  // focus 'keys' for event listerers\n  componentDidMount = () => {\n    this.calcRef.current.focus();\n  }\n\n  handleKeyDown = event => {\n    event.preventDefault();\n\n    if (event.key === 'Enter') {\n      this.setState({\n        activeKey: '='\n      });\n      this.props.handleInput('=');\n    }\n    if (event.key === 'Escape' || event.key === 'Esc') {\n      this.setState({\n        activeKey: 'CE'\n      });\n      this.props.handleInput('CE');\n    }\n    if (Object.values(this.props.ids).includes(event.key)) {\n      this.setState({\n        activeKey: event.key\n      });\n      this.props.handleInput(event.key);\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"keys\" >\n        {Object.keys(this.props.ids).map((key) => (\n          <button\n            ref={(key === 'clear') ? this.calcRef : ''}\n            key={key}\n            id={key}\n            className={this.state.activeKey === this.props.ids[key] ? 'buttonActive' : undefined}\n            onClick={() => this.props.handleInput(this.props.ids[key])}\n            onKeyDown={this.handleKeyDown}\n            onKeyUp={() => this.setState({activeKey: null})}>\n            {this.props.ids[key]}\n          </button>\n        ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keys;\n","import React from 'react';\nimport './App.css';\nimport Display from './components/Display';\nimport Keys from './components/Keys';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstValue: '',\n      operator: '',\n      modValue: '',\n      previousKeyType: '',\n      displayedNum: '0'\n    }\n  }\n\n  calculate = (n1, operator, n2) => {\n    const firstNum = parseFloat(n1)\n    const secondNum = parseFloat(n2)\n    if (operator === '+') return (firstNum + secondNum).toString()\n    if (operator === '-') return (firstNum - secondNum).toString()\n    if (operator === '*') return (firstNum * secondNum).toString()\n    if (operator === '/') return (firstNum / secondNum).toString()\n  }\n\n  getKeyType = key => {\n    // '+num' returns the numeric value of the string, or NaN if isn't\n    if (!isNaN(+key)) return 'number'\n    if (key === '+' || key === '-' || key === '*' || key === '/') return 'operator'\n    if (key === '.') return 'decimal'\n    if (key === 'CE') return 'clear'\n    if (key === '=') return 'calculate'\n  }\n\n  // returns the value that needs to be displayed\n  createResultString = (key, keyType) => {\n    if (keyType === 'number') {\n      return this.state.displayedNum === '0' || this.state.previousKeyType === 'operator' || this.state.previousKeyType === 'calculate'\n        ? key\n        : this.state.displayedNum + key\n    }\n\n    if (keyType === 'decimal') {\n      if (this.state.previousKeyType === 'operator' || this.state.previousKeyType === 'calculate') return '0.'\n      if (!this.state.displayedNum.includes('.')) return this.state.displayedNum + '.'\n      return this.state.displayedNum\n    }\n\n    if (keyType === 'operator') {\n      return this.state.firstValue &&\n        this.state.operator &&\n        this.state.previousKeyType !== 'operator' &&\n        this.state.previousKeyType !== 'calculate'\n        ? this.calculate(this.state.firstValue, this.state.operator, this.state.displayedNum)\n        : this.state.displayedNum\n    }\n\n    if (keyType === 'clear') return '0'\n\n    if (keyType === 'calculate') {\n      return this.state.firstValue\n        ? this.state.previousKeyType === 'calculate'\n          ? this.calculate(this.state.displayedNum, this.state.operator, this.state.modValue)\n          : this.calculate(this.state.firstValue, this.state.operator, this.state.displayedNum)\n        : this.state.displayedNum\n    }\n  }\n\n  handleInput = key => {\n    const keyType = this.getKeyType(key)\n    const calculatedValue = this.createResultString(key, keyType);\n\n  // callback function to ensure that the first 'setState' has been executed prior second call\n  // 'modValue' - previous value needed for the new calculation\n    this.setState({\n      displayedNum: calculatedValue,\n      modValue: this.state.firstValue && this.state.previousKeyType === 'calculate'\n        ? this.state.modValue\n        : this.state.displayedNum,\n      previousKeyType: keyType,\n\n    }, () => {\n      if (keyType === 'operator') {\n        this.setState({\n          operator: key,\n          firstValue: this.state.firstValue && this.state.operator && this.state.previousKeyType !== 'operator' && this.state.previousKeyType !== 'calculate'\n            ? calculatedValue\n            : this.state.displayedNum\n        });\n      }\n\n      if (keyType === 'clear') {\n        this.setState({\n          firstValue: '',\n          operator: '',\n          modValue: '',\n          previousKeyType: '',\n          displayedNum: '0'\n        });\n      }\n    });\n  }\n\n  render() {\n    const ids = {\n      clear: 'CE',\n      divide: '/',\n      multiply: '*',\n      seven: '7',\n      eight: '8',\n      nine: '9',\n      subtract: '-',\n      four: '4',\n      five: '5',\n      six: '6',\n      add: '+',\n      one: '1',\n      two: '2',\n      three: '3',\n      zero: '0',\n      decimal: '.',\n      equals: '='\n    }\n    return (\n      <>\n        <h1 className=\"logo\">Calculator</h1>\n        <div className=\"calculator\" >\n          <Display\n            formula={(this.state.previousKeyType === 'calculate') ? '' : `${this.state.firstValue} ${this.state.operator}`}\n            input={this.state.displayedNum} >\n          </Display>\n          <Keys ids={ids} handleInput={this.handleInput}></Keys>\n        </div>\n        <div className=\"author\">by <a href=\"https://pythonsway.it\" target=\"_blank\" rel=\"noopener noreferrer\">Python's way</a></div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}